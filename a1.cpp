//*******************************************************
//
// An T. Vo
// CS 302 - 1002, November 6th 2018
// Assignment #6
//
//*******************************************************

/* Write a C++ program which uses Huffman's algorithm to create an optimum prefix-free code for the
 * the Roman alphabet, together with ta symbol for space, using the frequencies of letters used in
 * English. Since I want everyone's code to be the same, you must use the list of
 * frequencies given in the file.
 */


/* Write a C++ program which encodes a file of paintext into a string of bits, using that Huffman code.
*/

/* Write a C++ program which decodes a string of bit sinto plaintext.
*/

/* 1. The program should first create the code, 
   2. then prompt the user to either encode or decode
   3. In either case, the user enters the name of the file (plaintext or code) to read,
   and the name of the file to write
   4. You could, instead, write the Huffman code into a file, then read that file to either encode or decode. 
   Dr. Larmore does not recommend this.
*/

// Use your program to encode text files and to decode files consisting of zeros and ones



#include <iostream>
#include <queue>
#include <string>
#include <vector>
#include <fstream>
//************************
// checking if there is a memory leak
#define _CRTDBG_MAP_ALLOC  
#include <stdlib.h>  
#include <crtdbg.h>  

using namespace std;

const int ORIGINAL_NUMBER_OF_NODES = 27;

//*************************************************************************
// struct HuffNode is the binary tree structure to be used for the
// Huffman algorithm
struct HuffNode
{
	int frequency;
	char letter;

	HuffNode *left, *right;

	HuffNode(int frequency, char letter)
	{
		left = NULL;
		right = NULL;
		this->frequency = frequency;
		this->letter = letter;
	}
};

// struct compare is used as the condition to be implmented upon
// the priority_queue because a priority queue is best data structure
// to store the small binary trees, which hold data, then merge them
// together
// Condition: left-frequency must be larger than right->frequency
// => the smallest binary tree has the highest priority
// in template <class T, class Container = vector<T>>
struct compare 
{
	bool operator()(HuffNode *left, HuffNode *right)
	{
		return (left->frequency > right->frequency);
	}
};

// print binary code generated by Huffman algorithm
// void function printBinaryData prints each letter and binary code
// that is associated with the letter to verify if Huffman algorithm works
void printBinaryData(struct HuffNode* root, string str)
{
	if (!root) 			// if the root is empty, terminate the void funtion
		return;

	printBinaryData(root->left, str + "0");   
	printBinaryData(root->right, str + "1");
	if (root->letter != '%')
		cout << root->letter << ": " << str << "\n";
}

// print the frequency
// void function printFrequency prints each letter and its frequency
// to verify if the program reads the data well
void printFrequency(struct HuffNode* root)
{
	if (!root) 			// if the root is empty, terminate the void funtion
		return;	
	
	if (root->letter != '%')
		cout << root->letter << ": " << root->frequency << "\n";
	printFrequency(root->left);
	printFrequency(root->right);

}

// the construction of a Huffman Tree
// void function HuffmanConstruction will generate the Huffman binary tree using
// a simple mersort and a priority queue that stores small binary trees.
// While the queue size is still not 0, it will pop the first 2 highest nodes
// of the queues (2 nodes with the smallest frequencies), then merge them into one,
// then push it into the queue. The previous step will continue until all of the binary
// trees become one.
// Precondition: integer array frequencies and character array letters, which are the input data
//				 int size as the size of both data, and the struct HuffNode completeHuffmanTree
// 				 takes the top element of the queue as the main binary tree used for encoding
// 				 and decoding
void HuffmanConstruction(int frequencies[], char letters[], int size, struct HuffNode* &completeHuffmanTree)
{
	struct HuffNode *left, *right, *top;

	priority_queue<HuffNode*, vector<HuffNode*>, compare> HuffmanQueue;

	for (int i = 0; i < size; ++i)
	{
		HuffmanQueue.push(new HuffNode(frequencies[i], letters[i]));
	}

	while (HuffmanQueue.size() != 1)
	{
		left = HuffmanQueue.top();
		HuffmanQueue.pop();

		right = HuffmanQueue.top();
		HuffmanQueue.pop();

		top = new HuffNode(left->frequency + right->frequency, '%');

		top->left = left;
		top->right = right;

		HuffmanQueue.push(top);
	}

	//printBinaryData(HuffmanQueue.top(), "");
	//printFrequency(HuffmanQueue.top());
	completeHuffmanTree = HuffmanQueue.top();
}

//******************************************************************************************
void createTheCode(struct HuffNode*&);
// void function createTheNode will read the file of frequencies then construct
// the binary tree generated by Huffman algorithm

void encodingPart(struct HuffNode*);
void encoding(struct HuffNode*);

/* 1. The program should first create the code, 
   2. then prompt the user to either encode or decode
   3. In either case, the user enters the name of the file (plaintext or code) to read,
   and the name of the file to write
   4. You could, instead, write the Huffman code into a file, then read that file to either encode or decode. 
   Dr. Larmore does not recommend this.
*/

int main() 
{ 
	// 1.
    struct HuffNode *completeHuffmanTree = NULL;
    createTheCode(completeHuffmanTree);
 
 	// 2.
    int choice = 0;
    string prompt1 = "Would you like to encode or decode?\nPlease:\nPress 1 to encode\nPress 2 to decode\n";    
    string prompt2 = "Press 9 to exit\n"; 
    cout << prompt1 << prompt2;
    cin >> choice;
    while(cin)
    {
	    if (choice == 1)
	    {
	    	encodingPart(completeHuffmanTree);
	    	break;
	    }
	    else if (choice == 2)
	    	break;
	    	// decode
	    else if (choice == 9)
	    	break;
	    else
	    {
	    	cout << "Invalid choice. Please choose again" << endl;    
	    	cin >> choice;	
	    }
    }
    //*************


	_CrtDumpMemoryLeaks();  
	system("pause");
    return 0; 
} 

//****************************************************************************************** larmore

void createTheCode(struct HuffNode* &completeHuffmanTree)
// void function createTheNode will read the file of frequencies then construct
// the binary tree generated by Huffman algorithm
{
	// declaring variables
	char letter[ORIGINAL_NUMBER_OF_NODES];
	for (int i = 0; i < ORIGINAL_NUMBER_OF_NODES; ++i)
	{
		letter[i] = '%';    // as in % is the initilizing value
	}
	
	int frequencies[ORIGINAL_NUMBER_OF_NODES];
	for (int i = 0; i < ORIGINAL_NUMBER_OF_NODES; ++i)
	{
		frequencies[i] = 0;
	}

	int index = 0;

	// variable for the ifstream
	ifstream infile;

	// open file
	infile.open("frequencies.txt");

	// check if the file is correct
	if (!infile)
	{
		cout << "Wrong input file" << endl;
		return;
	}

	// storing inputs into arrays
	infile >> frequencies[index];
	letter[index] = ' ';
	index++;
	while(!infile.eof())
	{
		infile >> letter[index] >> frequencies[index];
		index++;
	}

//	completeHuffmanTree = HuffmanConstruction(frequencies, letter, index); 			// testing to switch void function HuffmanConstruction
																					// into a node returned function. Worked
	HuffmanConstruction(frequencies, letter, index, completeHuffmanTree);
	// printFrequency(completeHuffmanTree);

	infile.close();
}



















//**************************************************************************************************
void encodingPart(struct HuffNode* HuffmanTree)
{
	// declaring variables
	string inputfile;
	string outputfile;
	ifstream infile;
	ofstream outfile;

	char text;

	cout << "\n\n Please enter the name of the file (plaintext or code)"
		 << " to read:" << endl;
	cin >> inputfile;
	infile.open(inputfile.c_str());
	while(!infile.eof())
	{
		infile.get(text);
		cout << text;
	}
}